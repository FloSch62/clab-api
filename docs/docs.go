// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "API Support",
            "url": "https://swagger.io/support/",
            "email": "support@swagger.io"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/api/v1/labs": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get details about all running labs, filtered by the 'owner' field matching the authenticated user (unless user is in SUPERUSER_GROUP).",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Labs"
                ],
                "summary": "List All Labs",
                "responses": {
                    "200": {
                        "description": "Filtered JSON output from 'clab inspect --all'",
                        "schema": {
                            "$ref": "#/definitions/models.ClabInspectOutput"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error or clab execution failed",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Deploys a containerlab topology from either embedded content or a remote URL (Git/HTTP).\nIf deploying from content, saves the file to ~/.clab/\u003clabname\u003e/ and sets ownership (requires API server privileges).\nIf deploying from URL, containerlab handles fetching; the API does not save the file locally.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Labs"
                ],
                "summary": "Deploy Lab",
                "parameters": [
                    {
                        "description": "Deployment details (topology content or URL, and options)",
                        "name": "deploy_request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.DeployRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Raw JSON output from 'clab deploy' (or plain text on error)",
                        "schema": {
                            "type": "object"
                        }
                    },
                    "400": {
                        "description": "Invalid input (e.g., missing content/URL, invalid flags, invalid name)",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error (e.g., file system errors, clab execution failed)",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/labs/{labName}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get details about a specific running lab, checking ownership via 'owner' field. Supports '--details'.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Labs"
                ],
                "summary": "Inspect Lab",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Name of the lab to inspect",
                        "name": "labName",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "boolean",
                        "description": "Include full container details (like docker inspect)",
                        "name": "details",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Raw JSON output if 'details=true' is used (structure matches 'docker inspect')\" // \u003c--- CHANGE THIS LINE",
                        "schema": {
                            "type": "object"
                        }
                    },
                    "400": {
                        "description": "Invalid lab name",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Lab not found or not owned by user",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error or clab execution failed",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Redeploys a lab by name, effectively running destroy and then deploy. Checks ownership.\nUses the original topology file path found during inspection.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Labs"
                ],
                "summary": "Redeploy Lab",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Name of the lab to redeploy",
                        "name": "labName",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Redeployment options",
                        "name": "redeploy_request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.RedeployRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Raw JSON output from 'clab redeploy' (or plain text on error)",
                        "schema": {
                            "type": "object"
                        }
                    },
                    "400": {
                        "description": "Invalid lab name or options",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Lab not found or not owned by user",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error or clab execution failed",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Destroys a lab by name, checking ownership via 'owner' field from clab inspect.\nOptionally cleans up the lab directory (~/.clab/\u003clabname\u003e) if 'cleanup=true' is passed and the API deployed it from content.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Labs"
                ],
                "summary": "Destroy Lab",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Name of the lab to destroy",
                        "name": "labName",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "boolean",
                        "description": "Remove lab directory (~/.clab/\u003clabname\u003e) after destroy (default: false)",
                        "name": "cleanup",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "Attempt graceful shutdown of containers (default: false)",
                        "name": "graceful",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "Keep the management network (default: false)",
                        "name": "keepMgmtNet",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Destroy only specific nodes (comma-separated)",
                        "name": "nodeFilter",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.GenericSuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid lab name or node filter",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Lab not found or not owned by user",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error or clab execution failed",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/labs/{labName}/interfaces": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get network interface details for nodes in a specific lab, checking ownership.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Labs"
                ],
                "summary": "List Lab Interfaces",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Name of the lab",
                        "name": "labName",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Filter interfaces for a specific node name",
                        "name": "node",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "JSON output from 'clab inspect interfaces'",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.NodeInterfaceInfo"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid lab name or node name",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Lab not found or not owned by user",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error or clab execution failed",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/login": {
            "post": {
                "description": "Authenticate user and return JWT token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Login",
                "parameters": [
                    {
                        "description": "User Credentials",
                        "name": "credentials",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.LoginRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.LoginResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid input",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Invalid credentials",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error (PAM config?)",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "models.ClabContainerInfo": {
            "type": "object",
            "properties": {
                "container_id": {
                    "description": "Docker container ID (short)",
                    "type": "string"
                },
                "group": {
                    "description": "Group assigned in topology (Might not always be present)",
                    "type": "string"
                },
                "image": {
                    "description": "Container image used",
                    "type": "string"
                },
                "ipv4_address": {
                    "description": "Management IPv4 Address/Mask",
                    "type": "string"
                },
                "ipv6_address": {
                    "description": "Management IPv6 Address/Mask",
                    "type": "string"
                },
                "kind": {
                    "description": "e.g., \"srl\", \"linux\", \"nokia_srlinux\"",
                    "type": "string"
                },
                "labPath": {
                    "description": "Path to the topology file used",
                    "type": "string"
                },
                "lab_name": {
                    "description": "Name of the lab this node belongs to",
                    "type": "string"
                },
                "name": {
                    "description": "Name of the container node",
                    "type": "string"
                },
                "owner": {
                    "description": "OS user from clab inspect output (Used for authorization)",
                    "type": "string"
                },
                "state": {
                    "description": "e.g., \"running\"",
                    "type": "string"
                }
            }
        },
        "models.ClabInspectOutput": {
            "type": "object",
            "properties": {
                "containers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.ClabContainerInfo"
                    }
                }
            }
        },
        "models.DeployRequest": {
            "type": "object",
            "properties": {
                "exportTemplate": {
                    "description": "Corresponds to --export-template flag (__full is special)",
                    "type": "string",
                    "example": "my_custom_export.tmpl"
                },
                "labNameOverride": {
                    "description": "--- Optional Flags ---",
                    "type": "string",
                    "example": "my-specific-lab-run"
                },
                "maxWorkers": {
                    "description": "Corresponds to --max-workers flag (0 means default)",
                    "type": "integer"
                },
                "nodeFilter": {
                    "description": "Corresponds to --node-filter flag (comma-separated)",
                    "type": "string",
                    "example": "srl1,srl2"
                },
                "reconfigure": {
                    "description": "Corresponds to --reconfigure flag",
                    "type": "boolean"
                },
                "skipLabdirAcl": {
                    "description": "Corresponds to --skip-labdir-acl flag",
                    "type": "boolean"
                },
                "skipPostDeploy": {
                    "description": "Corresponds to --skip-post-deploy flag",
                    "type": "boolean"
                },
                "topologyContent": {
                    "description": "Option 1: Direct Topology Content (YAML string)",
                    "type": "string",
                    "example": "name: my-lab\ntopology:\n  nodes:\n    srl1:\n      kind: srl\n      image: ghcr.io/nokia/srlinux"
                },
                "topologySourceUrl": {
                    "description": "Option 2: Remote Topology Source URL (Git repo, Git file, HTTP(S) URL)\nIf provided, TopologyContent is ignored.",
                    "type": "string",
                    "example": "https://github.com/hellt/clab-test-repo/blob/main/lab1.clab.yml"
                }
            }
        },
        "models.ErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                }
            }
        },
        "models.GenericSuccessResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                }
            }
        },
        "models.InterfaceInfo": {
            "type": "object",
            "properties": {
                "alias": {
                    "description": "Interface alias (e.g., \"ethernet-1/1\", \"\" if none)",
                    "type": "string"
                },
                "ifindex": {
                    "description": "Interface index",
                    "type": "integer"
                },
                "mac": {
                    "description": "MAC Address",
                    "type": "string"
                },
                "mtu": {
                    "description": "MTU size",
                    "type": "integer"
                },
                "name": {
                    "description": "Interface name (e.g., \"eth0\", \"e1-1\")",
                    "type": "string"
                },
                "state": {
                    "description": "Interface state (e.g., \"up\", \"down\", \"unknown\")",
                    "type": "string"
                },
                "type": {
                    "description": "Interface type (e.g., \"veth\", \"device\", \"dummy\")",
                    "type": "string"
                }
            }
        },
        "models.LoginRequest": {
            "type": "object",
            "required": [
                "password",
                "username"
            ],
            "properties": {
                "password": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "models.LoginResponse": {
            "type": "object",
            "properties": {
                "token": {
                    "type": "string"
                }
            }
        },
        "models.NodeInterfaceInfo": {
            "type": "object",
            "properties": {
                "interfaces": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.InterfaceInfo"
                    }
                },
                "name": {
                    "description": "Name of the container node",
                    "type": "string"
                }
            }
        },
        "models.RedeployRequest": {
            "type": "object",
            "properties": {
                "cleanup": {
                    "description": "Corresponds to --cleanup flag",
                    "type": "boolean"
                },
                "exportTemplate": {
                    "description": "Corresponds to --export-template flag (__full is special)",
                    "type": "string"
                },
                "graceful": {
                    "description": "Corresponds to --graceful flag",
                    "type": "boolean"
                },
                "graph": {
                    "description": "Corresponds to --graph flag",
                    "type": "boolean"
                },
                "ipv4Subnet": {
                    "description": "Corresponds to --ipv4-subnet flag",
                    "type": "string"
                },
                "ipv6Subnet": {
                    "description": "Corresponds to --ipv6-subnet flag",
                    "type": "string"
                },
                "keepMgmtNet": {
                    "description": "Corresponds to --keep-mgmt-net flag",
                    "type": "boolean"
                },
                "maxWorkers": {
                    "description": "Corresponds to --max-workers flag (0 means default)",
                    "type": "integer"
                },
                "network": {
                    "description": "Corresponds to --network flag",
                    "type": "string"
                },
                "skipLabdirAcl": {
                    "description": "Corresponds to --skip-labdir-acl flag",
                    "type": "boolean"
                },
                "skipPostDeploy": {
                    "description": "Corresponds to --skip-post-deploy flag",
                    "type": "boolean"
                }
            }
        }
    },
    "securityDefinitions": {
        "BearerAuth": {
            "description": "Type \"Bearer\" followed by a space and JWT token. Example: \"Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\"",
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8080",
	BasePath:         "",
	Schemes:          []string{"http", "https"},
	Title:            "Containerlab API",
	Description:      "This is an API server to interact with Containerlab for authenticated Linux users. Runs clab commands as the API server's user. Requires PAM for authentication.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
