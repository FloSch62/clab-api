// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "API Support",
            "url": "https://swagger.io/support/",
            "email": "support@swagger.io"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/api/v1/generate": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Generates a containerlab topology file based on CLOS definitions. Optionally deploys it.\nThe 'images' and 'licenses' fields expect a map where the key is the node 'kind' and the value is the corresponding image or license path (e.g., {\"nokia_srlinux\": \"ghcr.io/...\"}).\nIf Deploy=true, the topology is saved to the user's ~/.clab/\u003clabName\u003e/ directory before deployment, and the 'outputFile' field is ignored.\nIf Deploy=false and 'outputFile' is empty, YAML is returned directly.\nIf Deploy=false and 'outputFile' is set, the file is saved to that path on the server (requires API server write permissions).",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Topology Generation"
                ],
                "summary": "Generate Topology",
                "parameters": [
                    {
                        "description": "Topology generation parameters. Note: 'images'/'licenses' format is { \\",
                        "name": "generate_request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.GenerateRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Generation successful (YAML or deploy output)",
                        "schema": {
                            "$ref": "#/definitions/models.GenerateResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid input parameters",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error or clab execution failed",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/labs": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get details about all running labs, filtered by the 'owner' field matching the authenticated user (unless user is in SUPERUSER_GROUP).",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Labs"
                ],
                "summary": "List All Labs",
                "responses": {
                    "200": {
                        "description": "Filtered JSON output from 'clab inspect --all'",
                        "schema": {
                            "$ref": "#/definitions/models.ClabInspectOutput"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error or clab execution failed",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Deploys a containerlab topology. Requires EITHER 'topologyContent' OR 'topologySourceUrl' in the request body, but not both.\nOptional deployment flags are provided as query parameters.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Labs"
                ],
                "summary": "Deploy Lab",
                "parameters": [
                    {
                        "description": "Deployment Source: Provide 'topologyContent' OR 'topologySourceUrl'.",
                        "name": "deploy_request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.DeployRequest"
                        }
                    },
                    {
                        "type": "string",
                        "description": "Overrides the 'name' field within the topology or inferred from URL.",
                        "name": "labNameOverride",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "Destroy lab and clean directory before deploying (default: false).",
                        "name": "reconfigure",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Limit concurrent workers (0 or omit for default).",
                        "name": "maxWorkers",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Custom Go template file for topology data export ('__full' for full export).",
                        "name": "exportTemplate",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Comma-separated list of node names to deploy.",
                        "name": "nodeFilter",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "Skip post-deploy actions defined for nodes (default: false).",
                        "name": "skipPostDeploy",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "Skip setting extended ACLs on lab directory (default: false).",
                        "name": "skipLabdirAcl",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Raw JSON output from 'clab deploy' (or plain text on error)",
                        "schema": {
                            "type": "object"
                        }
                    },
                    "400": {
                        "description": "Invalid input (e.g., missing/both content/URL, invalid flags/params)",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error (e.g., file system errors, clab execution failed)",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/labs/{labName}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get details about a specific running lab, checking ownership via 'owner' field. Supports '--details'.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Labs"
                ],
                "summary": "Inspect Lab",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Name of the lab to inspect",
                        "name": "labName",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "boolean",
                        "description": "Include full container details (like docker inspect)",
                        "name": "details",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Raw JSON output if 'details=true' is used (structure matches 'docker inspect')",
                        "schema": {
                            "type": "object"
                        }
                    },
                    "400": {
                        "description": "Invalid lab name",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Lab not found or not owned by user",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error or clab execution failed",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Redeploys a lab by name, effectively running destroy and then deploy. Checks ownership.\nUses the original topology file path found during inspection.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Labs"
                ],
                "summary": "Redeploy Lab",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Name of the lab to redeploy",
                        "name": "labName",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Redeployment options",
                        "name": "redeploy_request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.RedeployRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Raw JSON output from 'clab redeploy' (or plain text on error)",
                        "schema": {
                            "type": "object"
                        }
                    },
                    "400": {
                        "description": "Invalid lab name or options",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Lab not found or not owned by user",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error or clab execution failed",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Destroys a lab by name, checking ownership via 'owner' field from clab inspect.\nOptionally cleans up the lab directory (~/.clab/\u003clabname\u003e) if 'cleanup=true' is passed and the API deployed it from content.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Labs"
                ],
                "summary": "Destroy Lab",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Name of the lab to destroy",
                        "name": "labName",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "boolean",
                        "description": "Remove lab directory (~/.clab/\u003clabname\u003e) after destroy (default: false)",
                        "name": "cleanup",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "Attempt graceful shutdown of containers (default: false)",
                        "name": "graceful",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "Keep the management network (default: false)",
                        "name": "keepMgmtNet",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Destroy only specific nodes (comma-separated)",
                        "name": "nodeFilter",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.GenericSuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid lab name or node filter",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Lab not found or not owned by user",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error or clab execution failed",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/labs/{labName}/exec": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Executes a command on nodes within a specific lab. Checks ownership. Supports filtering by a single node name.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Labs"
                ],
                "summary": "Execute Command in Lab",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Name of the lab where the command should be executed",
                        "name": "labName",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Execute only on this specific node (must match container name, e.g., clab-my-test-lab-srl1)",
                        "name": "nodeFilter",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Output format ('plain' or 'json'). Default is 'json'.",
                        "name": "format",
                        "in": "query"
                    },
                    {
                        "description": "Command to execute",
                        "name": "exec_request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.ExecRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Plain text output (if format=plain)",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid input (lab name, node filter, format, request body)",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Lab not found or not owned by user",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error or clab execution failed",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/labs/{labName}/interfaces": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get network interface details for nodes in a specific lab, checking ownership.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Labs"
                ],
                "summary": "List Lab Interfaces",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Name of the lab",
                        "name": "labName",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Filter interfaces for a specific node name",
                        "name": "node",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "JSON output from 'clab inspect interfaces'",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.NodeInterfaceInfo"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid lab name or node name",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Lab not found or not owned by user",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error or clab execution failed",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/labs/{labName}/nodes/{nodeName}/interfaces/{interfaceName}/netem": {
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Sets network impairments (delay, jitter, loss, rate, corruption) on a specific interface of a node within a lab. Checks lab ownership.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Tools - Netem"
                ],
                "summary": "Set Network Emulation",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Name of the lab",
                        "name": "labName",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Logical name of the node in the topology",
                        "name": "nodeName",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Name of the interface within the container",
                        "name": "interfaceName",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Network Emulation Parameters",
                        "name": "netem_params",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.NetemSetRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Impairments set successfully",
                        "schema": {
                            "$ref": "#/definitions/models.GenericSuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid input (lab/node/interface name, netem params)",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized (JWT)",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Lab, node, or interface not found / not owned",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error or clab execution failed",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Removes all network impairments from a specific interface of a node within a lab. Checks lab ownership.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Tools - Netem"
                ],
                "summary": "Reset Network Emulation",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Name of the lab",
                        "name": "labName",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Logical name of the node in the topology",
                        "name": "nodeName",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Name of the interface within the container",
                        "name": "interfaceName",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Impairments reset successfully",
                        "schema": {
                            "$ref": "#/definitions/models.GenericSuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid input (lab/node/interface name)",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized (JWT)",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Lab, node, or interface not found / not owned",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error or clab execution failed",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/labs/{labName}/nodes/{nodeName}/netem": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Shows network impairments for all interfaces on a specific node within a lab. Checks lab ownership.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Tools - Netem"
                ],
                "summary": "Show Network Emulation",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Name of the lab",
                        "name": "labName",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Logical name of the node in the topology",
                        "name": "nodeName",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Current network emulation parameters",
                        "schema": {
                            "$ref": "#/definitions/models.NetemShowResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid input (lab/node name)",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized (JWT)",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Lab or node not found / not owned",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error or clab execution failed",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/labs/{labName}/save": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Saves the running configuration for nodes in a specific lab. Checks ownership.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Labs"
                ],
                "summary": "Save Lab Configuration",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Name of the lab to save configuration for",
                        "name": "labName",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Save config only for specific nodes (comma-separated)",
                        "name": "nodeFilter",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Configuration save command executed, includes detailed output.",
                        "schema": {
                            "$ref": "#/definitions/models.SaveConfigResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid lab name or node filter",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Lab not found or not owned by user",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error or clab execution failed",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/tools/certs/ca": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Creates a CA certificate and private key. Requires SUPERUSER privileges. Files are stored in the user's ~/.clab/certs/\u003cca_name\u003e/ directory on the server.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Tools - Certificates"
                ],
                "summary": "Create Certificate Authority (CA)",
                "parameters": [
                    {
                        "description": "CA Generation Parameters",
                        "name": "ca_request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.CACreateRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "CA created successfully",
                        "schema": {
                            "$ref": "#/definitions/models.CertResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid input parameters",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized (JWT)",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden (User is not a superuser)",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error (filesystem, clab execution)",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/tools/certs/sign": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Creates a certificate/key and signs it with a previously generated CA. Requires SUPERUSER privileges. Files are stored in the user's ~/.clab/certs/\u003cca_name\u003e/ directory.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Tools - Certificates"
                ],
                "summary": "Sign Certificate",
                "parameters": [
                    {
                        "description": "Certificate Signing Parameters",
                        "name": "sign_request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.CertSignRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Certificate signed successfully",
                        "schema": {
                            "$ref": "#/definitions/models.CertResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid input parameters (name, hosts, CA name, etc.)",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized (JWT)",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden (User is not a superuser)",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Specified CA not found",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error (filesystem, clab execution)",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/tools/disable-tx-offload": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Disables TX checksum offload for the eth0 interface of a specific container. Requires SUPERUSER privileges.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Tools"
                ],
                "summary": "Disable TX Checksum Offload",
                "parameters": [
                    {
                        "description": "Container Name",
                        "name": "tx_request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.DisableTxOffloadRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Offload disabled successfully",
                        "schema": {
                            "$ref": "#/definitions/models.GenericSuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid input",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized (JWT)",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden (User is not a superuser)",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Container not found",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error or clab execution failed",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/tools/veth": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Creates a virtual Ethernet (vEth) pair between two specified endpoints (container, host, bridge, ovs-bridge). Requires SUPERUSER privileges.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Tools - vEth"
                ],
                "summary": "Create vEth Pair",
                "parameters": [
                    {
                        "description": "vEth Creation Parameters",
                        "name": "veth_request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.VethCreateRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "vEth pair created successfully",
                        "schema": {
                            "$ref": "#/definitions/models.GenericSuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid input parameters (endpoints, MTU)",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized (JWT)",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden (User is not a superuser)",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error (clab execution failed)",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/tools/vxlan": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Creates a VxLAN tunnel interface and sets up tc rules for traffic redirection. Requires SUPERUSER privileges.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Tools - VxLAN"
                ],
                "summary": "Create VxLAN Tunnel",
                "parameters": [
                    {
                        "description": "VxLAN Creation Parameters",
                        "name": "vxlan_request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.VxlanCreateRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "VxLAN tunnel created successfully",
                        "schema": {
                            "$ref": "#/definitions/models.GenericSuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid input parameters (remote, link, id, port, etc.)",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized (JWT)",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden (User is not a superuser)",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error (clab execution failed)",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Deletes VxLAN tunnel interfaces matching a given prefix (default: 'vx-'). Requires SUPERUSER privileges.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Tools - VxLAN"
                ],
                "summary": "Delete VxLAN Tunnels by Prefix",
                "parameters": [
                    {
                        "type": "string",
                        "default": "vx-",
                        "description": "Prefix of VxLAN interfaces to delete",
                        "name": "prefix",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "VxLAN tunnels deleted successfully",
                        "schema": {
                            "$ref": "#/definitions/models.GenericSuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid prefix format",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized (JWT)",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden (User is not a superuser)",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error (clab execution failed)",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/login": {
            "post": {
                "description": "Authenticate user and return JWT token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Login",
                "parameters": [
                    {
                        "description": "User Credentials",
                        "name": "credentials",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.LoginRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.LoginResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid input",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Invalid credentials",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error (PAM config?)",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "models.CACreateRequest": {
            "type": "object",
            "properties": {
                "commonName": {
                    "description": "Defaults to \"containerlab.dev\"",
                    "type": "string",
                    "example": "ca.example.com"
                },
                "country": {
                    "description": "Defaults to \"Internet\"",
                    "type": "string",
                    "example": "US"
                },
                "expiry": {
                    "description": "Duration string, defaults to \"87600h\" (10 years)",
                    "type": "string",
                    "example": "8760h"
                },
                "locality": {
                    "description": "Defaults to \"Server\"",
                    "type": "string",
                    "example": "City"
                },
                "name": {
                    "description": "Defaults to \"ca\" if empty",
                    "type": "string",
                    "example": "my-root-ca"
                },
                "orgUnit": {
                    "description": "Defaults to \"Containerlab Tools\"",
                    "type": "string",
                    "example": "IT"
                },
                "organization": {
                    "description": "Defaults to \"Containerlab\"",
                    "type": "string",
                    "example": "MyOrg"
                }
            }
        },
        "models.CertResponse": {
            "type": "object",
            "properties": {
                "certPath": {
                    "description": "e.g., \"my-root-ca/my-root-ca.pem\" or \"my-root-ca/node1.example.com.pem\"",
                    "type": "string"
                },
                "csrPath": {
                    "description": "e.g., \"my-root-ca/my-root-ca.csr\" or \"my-root-ca/node1.example.com.csr\"",
                    "type": "string"
                },
                "keyPath": {
                    "description": "e.g., \"my-root-ca/my-root-ca.key\" or \"my-root-ca/node1.example.com.key\"",
                    "type": "string"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "models.CertSignRequest": {
            "type": "object",
            "required": [
                "caName",
                "hosts",
                "name"
            ],
            "properties": {
                "caName": {
                    "description": "Name of the CA cert/key files (without .pem/.key) previously generated",
                    "type": "string",
                    "example": "my-root-ca"
                },
                "commonName": {
                    "description": "Defaults to Name if empty",
                    "type": "string",
                    "example": "node1.example.com"
                },
                "country": {
                    "description": "Defaults to \"Internet\"",
                    "type": "string",
                    "example": "US"
                },
                "hosts": {
                    "description": "SANs (DNS names or IPs), comma-separated in clab, array here",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "keySize": {
                    "description": "Defaults to 2048",
                    "type": "integer",
                    "example": 4096
                },
                "locality": {
                    "description": "Defaults to \"Server\"",
                    "type": "string",
                    "example": "City"
                },
                "name": {
                    "description": "Required",
                    "type": "string",
                    "example": "node1.example.com"
                },
                "orgUnit": {
                    "description": "Defaults to \"Containerlab Tools\"",
                    "type": "string",
                    "example": "Nodes"
                },
                "organization": {
                    "description": "Defaults to \"Containerlab\"",
                    "type": "string",
                    "example": "MyOrg"
                }
            }
        },
        "models.ClabContainerInfo": {
            "type": "object",
            "properties": {
                "container_id": {
                    "description": "Docker container ID (short)",
                    "type": "string"
                },
                "group": {
                    "description": "Group assigned in topology (Might not always be present)",
                    "type": "string"
                },
                "image": {
                    "description": "Container image used",
                    "type": "string"
                },
                "ipv4_address": {
                    "description": "Management IPv4 Address/Mask",
                    "type": "string"
                },
                "ipv6_address": {
                    "description": "Management IPv6 Address/Mask",
                    "type": "string"
                },
                "kind": {
                    "description": "e.g., \"srl\", \"linux\", \"nokia_srlinux\"",
                    "type": "string"
                },
                "labPath": {
                    "description": "Path to the topology file used",
                    "type": "string"
                },
                "lab_name": {
                    "description": "Name of the lab this node belongs to",
                    "type": "string"
                },
                "name": {
                    "description": "Name of the container node",
                    "type": "string"
                },
                "owner": {
                    "description": "OS user from clab inspect output (Used for authorization)",
                    "type": "string"
                },
                "state": {
                    "description": "e.g., \"running\"",
                    "type": "string"
                }
            }
        },
        "models.ClabExecInternalResult": {
            "type": "object",
            "properties": {
                "cmd": {
                    "description": "The command and its arguments as executed",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "return-code": {
                    "description": "Exit code of the command inside the container",
                    "type": "integer"
                },
                "stderr": {
                    "description": "Standard error of the command",
                    "type": "string"
                },
                "stdout": {
                    "description": "Standard output of the command",
                    "type": "string"
                }
            }
        },
        "models.ClabInspectOutput": {
            "type": "object",
            "properties": {
                "containers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.ClabContainerInfo"
                    }
                }
            }
        },
        "models.DeployRequest": {
            "type": "object",
            "properties": {
                "topologyContent": {
                    "description": "Option 1: Direct Topology Content.\nProvide the full containerlab topology YAML as a single string.\nIf this is provided, 'topologySourceUrl' MUST be empty.",
                    "type": "string",
                    "example": "# topology documentation: http://containerlab.dev/lab-examples/single-srl/\nname: srl01\ntopology:\n kinds:\n nokia_srlinux:\n type: ixrd3\n image: ghcr.io/nokia/srlinux\n\n nodes:\n srl1:\n kind: nokia_srlinux\n srl2:\n kind: nokia_srlinux\n\n links:\n - endpoints: [\"srl1:e1-1\",\"srl2:e1-1\"]"
                },
                "topologySourceUrl": {
                    "description": "Option 2: Remote Topology Source URL.\nProvide a URL to a Git repository, a specific .clab.yml file in Git (github/gitlab), or a raw HTTP(S) URL.\nIf this is provided, 'topologyContent' MUST be empty.",
                    "type": "string"
                }
            }
        },
        "models.DisableTxOffloadRequest": {
            "type": "object",
            "required": [
                "containerName"
            ],
            "properties": {
                "containerName": {
                    "type": "string",
                    "example": "clab-my-lab-srl1"
                }
            }
        },
        "models.ErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                }
            }
        },
        "models.ExecRequest": {
            "type": "object",
            "required": [
                "command"
            ],
            "properties": {
                "command": {
                    "type": "string",
                    "example": "ip addr show eth1"
                }
            }
        },
        "models.ExecResponse": {
            "type": "object",
            "additionalProperties": {
                "type": "array",
                "items": {
                    "$ref": "#/definitions/models.ClabExecInternalResult"
                }
            }
        },
        "models.GenerateNodeTier": {
            "type": "object",
            "required": [
                "count"
            ],
            "properties": {
                "count": {
                    "description": "Number of nodes in this tier",
                    "type": "integer",
                    "minimum": 1,
                    "example": 4
                },
                "kind": {
                    "description": "Node kind (defaults to 'srl'/'nokia_srlinux' if omitted)",
                    "type": "string",
                    "example": "nokia_srlinux"
                },
                "type": {
                    "description": "Node type within the kind",
                    "type": "string",
                    "example": "ixrd3"
                }
            }
        },
        "models.GenerateRequest": {
            "type": "object",
            "required": [
                "images",
                "name",
                "tiers"
            ],
            "properties": {
                "defaultKind": {
                    "description": "Default kind to use if not specified in a tier definition. Defaults to 'srl'.",
                    "type": "string",
                    "example": "nokia_srlinux"
                },
                "deploy": {
                    "description": "If true, immediately deploy the generated topology using 'clab deploy --reconfigure'.\nThe topology file will be saved in the user's ~/.clab/\u003clabName\u003e/ directory.",
                    "type": "boolean"
                },
                "groupPrefix": {
                    "description": "Prefix for node groups (used in graphing). Defaults to \"tier\".",
                    "type": "string",
                    "example": "clos-tier"
                },
                "images": {
                    "description": "Map of kind to container image. This field is MANDATORY.\nThe key is the node 'kind' (e.g., \"nokia_srlinux\", \"ceos\") and the value is the container image path.\n@Example map[string]string{\"nokia_srlinux\":\"ghcr.io/nokia/srlinux:latest\", \"linux\":\"ubuntu:latest\"}",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "ipv4Subnet": {
                    "description": "Management network IPv4 subnet (CIDR). Defaults based on clab default.",
                    "type": "string",
                    "example": "172.20.20.0/24"
                },
                "ipv6Subnet": {
                    "description": "Management network IPv6 subnet (CIDR). Defaults based on clab default.",
                    "type": "string",
                    "example": "2001:172:20:20::/64"
                },
                "licenses": {
                    "description": "Map of kind to license file path (accessible to the clab command).\nThe key is the node 'kind' (e.g., \"srl\") and the value is the path to the license file on the server.\n@Example map[string]string{\"srl\":\"/opt/licenses/srl.lic\"}",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "managementNetwork": {
                    "description": "Name of the management network. Defaults to \"clab\".",
                    "type": "string",
                    "example": "clos-mgmt"
                },
                "maxWorkers": {
                    "description": "Limit concurrent workers during deployment (only applies if Deploy=true). 0 means default.",
                    "type": "integer"
                },
                "name": {
                    "description": "Name for the generated lab topology.",
                    "type": "string",
                    "example": "3-tier-clos"
                },
                "nodePrefix": {
                    "description": "Prefix for node names (e.g., \"node\" -\u003e \"node-1-1\", \"node-2-1\"). Defaults to \"node\".",
                    "type": "string",
                    "example": "clos-node"
                },
                "outputFile": {
                    "description": "Optional: Path where the generated file should be saved *on the server*.\nIf Deploy=true, this field is IGNORED.\nIf Deploy=false and this field is empty, YAML is returned directly in the response.\nIf Deploy=false and this field is set, the file is saved to this path on the server (API server user needs write permission).",
                    "type": "string"
                },
                "tiers": {
                    "description": "Definition of the CLOS tiers. Order matters (leaf -\u003e spine -\u003e superspine).\nExample: [ { \"count\": 8, \"kind\": \"srl\", \"type\": \"ixrd3\" }, { \"count\": 4, \"kind\": \"nokia_srlinux\" }, { \"count\": 2 } ]",
                    "type": "array",
                    "minItems": 1,
                    "items": {
                        "$ref": "#/definitions/models.GenerateNodeTier"
                    }
                }
            }
        },
        "models.GenerateResponse": {
            "type": "object",
            "properties": {
                "deployOutput": {
                    "description": "The output from the deploy command (only if Deploy=true). Can be JSON or plain text.\nUse swaggertype:\"object\" to represent json.RawMessage in Swagger.",
                    "type": "object"
                },
                "message": {
                    "description": "Message indicating success or failure.",
                    "type": "string"
                },
                "savedFilePath": {
                    "description": "Path where the file was saved (if Deploy=true, it's the path in the user's ~/.clab dir; if Deploy=false, it's the OutputFile path if provided).",
                    "type": "string"
                },
                "topologyYaml": {
                    "description": "The generated topology YAML (only if Deploy=false and OutputFile is empty).",
                    "type": "string"
                }
            }
        },
        "models.GenericSuccessResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                }
            }
        },
        "models.InterfaceInfo": {
            "type": "object",
            "properties": {
                "alias": {
                    "description": "Interface alias (e.g., \"ethernet-1/1\", \"\" if none)",
                    "type": "string"
                },
                "ifindex": {
                    "description": "Interface index",
                    "type": "integer"
                },
                "mac": {
                    "description": "MAC Address",
                    "type": "string"
                },
                "mtu": {
                    "description": "MTU size",
                    "type": "integer"
                },
                "name": {
                    "description": "Interface name (e.g., \"eth0\", \"e1-1\")",
                    "type": "string"
                },
                "state": {
                    "description": "Interface state (e.g., \"up\", \"down\", \"unknown\")",
                    "type": "string"
                },
                "type": {
                    "description": "Interface type (e.g., \"veth\", \"device\", \"dummy\")",
                    "type": "string"
                }
            }
        },
        "models.LoginRequest": {
            "type": "object",
            "required": [
                "password",
                "username"
            ],
            "properties": {
                "password": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "models.LoginResponse": {
            "type": "object",
            "properties": {
                "token": {
                    "type": "string"
                }
            }
        },
        "models.NetemInterfaceInfo": {
            "type": "object",
            "properties": {
                "corruption": {
                    "description": "Percentage (might be missing in older clab versions)",
                    "type": "number"
                },
                "delay": {
                    "description": "Duration string or empty",
                    "type": "string"
                },
                "interface": {
                    "description": "Interface name",
                    "type": "string"
                },
                "jitter": {
                    "description": "Duration string or empty",
                    "type": "string"
                },
                "packet_loss": {
                    "description": "Percentage",
                    "type": "number"
                },
                "rate": {
                    "description": "Kbit/s",
                    "type": "integer"
                }
            }
        },
        "models.NetemSetRequest": {
            "type": "object",
            "properties": {
                "corruption": {
                    "description": "Percentage (0.0 to 100.0)",
                    "type": "number",
                    "example": 0.1
                },
                "delay": {
                    "description": "Duration string (e.g., \"100ms\", \"1s\")",
                    "type": "string",
                    "example": "50ms"
                },
                "jitter": {
                    "description": "Duration string, requires Delay",
                    "type": "string",
                    "example": "5ms"
                },
                "loss": {
                    "description": "Percentage (0.0 to 100.0)",
                    "type": "number",
                    "example": 10.5
                },
                "rate": {
                    "description": "Kbit/s (non-negative integer)",
                    "type": "integer",
                    "example": 1000
                }
            }
        },
        "models.NetemShowResponse": {
            "type": "object",
            "additionalProperties": {
                "type": "array",
                "items": {
                    "$ref": "#/definitions/models.NetemInterfaceInfo"
                }
            }
        },
        "models.NodeInterfaceInfo": {
            "type": "object",
            "properties": {
                "interfaces": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.InterfaceInfo"
                    }
                },
                "name": {
                    "description": "Name of the container node",
                    "type": "string"
                }
            }
        },
        "models.RedeployRequest": {
            "type": "object",
            "properties": {
                "cleanup": {
                    "description": "Corresponds to --cleanup flag",
                    "type": "boolean"
                },
                "exportTemplate": {
                    "description": "Corresponds to --export-template flag (__full is special)",
                    "type": "string"
                },
                "graceful": {
                    "description": "Corresponds to --graceful flag",
                    "type": "boolean"
                },
                "graph": {
                    "description": "Corresponds to --graph flag",
                    "type": "boolean"
                },
                "ipv4Subnet": {
                    "description": "Corresponds to --ipv4-subnet flag",
                    "type": "string"
                },
                "ipv6Subnet": {
                    "description": "Corresponds to --ipv6-subnet flag",
                    "type": "string"
                },
                "keepMgmtNet": {
                    "description": "Corresponds to --keep-mgmt-net flag",
                    "type": "boolean"
                },
                "maxWorkers": {
                    "description": "Corresponds to --max-workers flag (0 means default)",
                    "type": "integer"
                },
                "network": {
                    "description": "Corresponds to --network flag",
                    "type": "string"
                },
                "skipLabdirAcl": {
                    "description": "Corresponds to --skip-labdir-acl flag",
                    "type": "boolean"
                },
                "skipPostDeploy": {
                    "description": "Corresponds to --skip-post-deploy flag",
                    "type": "boolean"
                }
            }
        },
        "models.SaveConfigResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "description": "Message indicating overall success.",
                    "type": "string"
                },
                "output": {
                    "description": "Detailed output from the 'clab save' command (often from stderr).",
                    "type": "string"
                }
            }
        },
        "models.VethCreateRequest": {
            "type": "object",
            "required": [
                "aEndpoint",
                "bEndpoint"
            ],
            "properties": {
                "aEndpoint": {
                    "description": "Endpoint A definition. Format: \u003cnode-name\u003e:\u003cinterface-name\u003e OR \u003ckind\u003e:\u003cnode-name\u003e:\u003cinterface-name\u003e\nExample: \"clab-demo-node1:eth1\" or \"bridge:br-1:br-eth1\" or \"host:veth-eth1\"",
                    "type": "string",
                    "example": "clab-demo-node1:eth1"
                },
                "bEndpoint": {
                    "description": "Endpoint B definition. Format: \u003cnode-name\u003e:\u003cinterface-name\u003e OR \u003ckind\u003e:\u003cnode-name\u003e:\u003cinterface-name\u003e\nExample: \"clab-demo-node2:eth1\" or \"ovs-bridge:ovsbr-1:br-eth1\"",
                    "type": "string",
                    "example": "clab-demo-node2:eth1"
                },
                "mtu": {
                    "description": "MTU for the vEth pair. Defaults to 9500 if omitted.",
                    "type": "integer",
                    "example": 1500
                }
            }
        },
        "models.VxlanCreateRequest": {
            "type": "object",
            "required": [
                "link",
                "remote"
            ],
            "properties": {
                "dev": {
                    "description": "Optional: Linux device to use for the tunnel source. Auto-detected if omitted.",
                    "type": "string",
                    "example": "eth0"
                },
                "id": {
                    "description": "VxLAN Network Identifier (VNI). Defaults to 10 if omitted.",
                    "type": "integer",
                    "example": 100
                },
                "link": {
                    "description": "Name of the existing interface in the root namespace to bridge traffic with.",
                    "type": "string",
                    "example": "srl_e1-1"
                },
                "mtu": {
                    "description": "Optional: MTU for the VxLAN interface. Auto-calculated if omitted.",
                    "type": "integer",
                    "example": 1400
                },
                "port": {
                    "description": "UDP port number for the VxLAN tunnel. Defaults to 4789 if omitted.",
                    "type": "integer",
                    "example": 4789
                },
                "remote": {
                    "description": "Remote VTEP IP address.",
                    "type": "string",
                    "example": "10.0.0.20"
                }
            }
        }
    },
    "securityDefinitions": {
        "BearerAuth": {
            "description": "Type \"Bearer\" followed by a space and JWT token. Example: \"Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\"",
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8080",
	BasePath:         "",
	Schemes:          []string{"http", "https"},
	Title:            "Containerlab API",
	Description:      "This is an API server to interact with Containerlab for authenticated Linux users. Runs clab commands as the API server's user. Requires PAM for authentication.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
