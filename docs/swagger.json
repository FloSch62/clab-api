{
    "schemes": [
        "http",
        "https"
    ],
    "swagger": "2.0",
    "info": {
        "description": "This is an API server to interact with Containerlab for authenticated Linux users. Runs clab commands as the API server's user. Requires PAM for authentication.",
        "title": "Containerlab API",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "API Support",
            "url": "https://swagger.io/support/",
            "email": "support@swagger.io"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "1.0"
    },
    "host": "localhost:8080",
    "paths": {
        "/api/v1/generate": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Generates a containerlab topology file based on CLOS definitions. Optionally deploys it.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Topology Generation"
                ],
                "summary": "Generate Topology",
                "parameters": [
                    {
                        "description": "Topology generation parameters",
                        "name": "generate_request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.GenerateRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Generation successful (YAML or deploy output)",
                        "schema": {
                            "$ref": "#/definitions/models.GenerateResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid input parameters",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error or clab execution failed",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/labs": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get details about all running labs, filtered by the 'owner' field matching the authenticated user (unless user is in SUPERUSER_GROUP).",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Labs"
                ],
                "summary": "List All Labs",
                "responses": {
                    "200": {
                        "description": "Filtered JSON output from 'clab inspect --all'",
                        "schema": {
                            "$ref": "#/definitions/models.ClabInspectOutput"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error or clab execution failed",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Deploys a containerlab topology. Requires EITHER 'topologyContent' OR 'topologySourceUrl' in the request body, but not both.\nOptional deployment flags are provided as query parameters.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Labs"
                ],
                "summary": "Deploy Lab",
                "parameters": [
                    {
                        "description": "Deployment Source: Provide 'topologyContent' OR 'topologySourceUrl'.",
                        "name": "deploy_request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.DeployRequest"
                        }
                    },
                    {
                        "type": "string",
                        "description": "Overrides the 'name' field within the topology or inferred from URL.",
                        "name": "labNameOverride",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "Destroy lab and clean directory before deploying (default: false).",
                        "name": "reconfigure",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Limit concurrent workers (0 or omit for default).",
                        "name": "maxWorkers",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Custom Go template file for topology data export ('__full' for full export).",
                        "name": "exportTemplate",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Comma-separated list of node names to deploy.",
                        "name": "nodeFilter",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "Skip post-deploy actions defined for nodes (default: false).",
                        "name": "skipPostDeploy",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "Skip setting extended ACLs on lab directory (default: false).",
                        "name": "skipLabdirAcl",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Raw JSON output from 'clab deploy' (or plain text on error)",
                        "schema": {
                            "type": "object"
                        }
                    },
                    "400": {
                        "description": "Invalid input (e.g., missing/both content/URL, invalid flags/params)",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error (e.g., file system errors, clab execution failed)",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/labs/{labName}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get details about a specific running lab, checking ownership via 'owner' field. Supports '--details'.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Labs"
                ],
                "summary": "Inspect Lab",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Name of the lab to inspect",
                        "name": "labName",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "boolean",
                        "description": "Include full container details (like docker inspect)",
                        "name": "details",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Raw JSON output if 'details=true' is used (structure matches 'docker inspect')\" // \u003c--- CHANGE THIS LINE",
                        "schema": {
                            "type": "object"
                        }
                    },
                    "400": {
                        "description": "Invalid lab name",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Lab not found or not owned by user",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error or clab execution failed",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Redeploys a lab by name, effectively running destroy and then deploy. Checks ownership.\nUses the original topology file path found during inspection.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Labs"
                ],
                "summary": "Redeploy Lab",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Name of the lab to redeploy",
                        "name": "labName",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Redeployment options",
                        "name": "redeploy_request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.RedeployRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Raw JSON output from 'clab redeploy' (or plain text on error)",
                        "schema": {
                            "type": "object"
                        }
                    },
                    "400": {
                        "description": "Invalid lab name or options",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Lab not found or not owned by user",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error or clab execution failed",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Destroys a lab by name, checking ownership via 'owner' field from clab inspect.\nOptionally cleans up the lab directory (~/.clab/\u003clabname\u003e) if 'cleanup=true' is passed and the API deployed it from content.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Labs"
                ],
                "summary": "Destroy Lab",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Name of the lab to destroy",
                        "name": "labName",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "boolean",
                        "description": "Remove lab directory (~/.clab/\u003clabname\u003e) after destroy (default: false)",
                        "name": "cleanup",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "Attempt graceful shutdown of containers (default: false)",
                        "name": "graceful",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "Keep the management network (default: false)",
                        "name": "keepMgmtNet",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Destroy only specific nodes (comma-separated)",
                        "name": "nodeFilter",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.GenericSuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid lab name or node filter",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Lab not found or not owned by user",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error or clab execution failed",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/labs/{labName}/exec": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Executes a command on nodes within a specific lab. Checks ownership. Supports filtering by a single node name.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Labs"
                ],
                "summary": "Execute Command in Lab",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Name of the lab where the command should be executed",
                        "name": "labName",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Execute only on this specific node (must match container name, e.g., clab-my-test-lab-srl1)",
                        "name": "nodeFilter",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Output format ('plain' or 'json'). Default is 'json'.",
                        "name": "format",
                        "in": "query"
                    },
                    {
                        "description": "Command to execute",
                        "name": "exec_request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.ExecRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Plain text output (if format=plain or default)",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid input (lab name, node filter, format, request body)",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Lab not found or not owned by user",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error or clab execution failed",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/labs/{labName}/interfaces": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get network interface details for nodes in a specific lab, checking ownership.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Labs"
                ],
                "summary": "List Lab Interfaces",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Name of the lab",
                        "name": "labName",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Filter interfaces for a specific node name",
                        "name": "node",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "JSON output from 'clab inspect interfaces'",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.NodeInterfaceInfo"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid lab name or node name",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Lab not found or not owned by user",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error or clab execution failed",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/labs/{labName}/save": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Saves the running configuration for nodes in a specific lab. Checks ownership.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Labs"
                ],
                "summary": "Save Lab Configuration",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Name of the lab to save configuration for",
                        "name": "labName",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Save config only for specific nodes (comma-separated)",
                        "name": "nodeFilter",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Configuration save command executed",
                        "schema": {
                            "$ref": "#/definitions/models.GenericSuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid lab name or node filter",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Lab not found or not owned by user",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error or clab execution failed",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/login": {
            "post": {
                "description": "Authenticate user and return JWT token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Login",
                "parameters": [
                    {
                        "description": "User Credentials",
                        "name": "credentials",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.LoginRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.LoginResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid input",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Invalid credentials",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error (PAM config?)",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "models.ClabContainerInfo": {
            "type": "object",
            "properties": {
                "container_id": {
                    "description": "Docker container ID (short)",
                    "type": "string"
                },
                "group": {
                    "description": "Group assigned in topology (Might not always be present)",
                    "type": "string"
                },
                "image": {
                    "description": "Container image used",
                    "type": "string"
                },
                "ipv4_address": {
                    "description": "Management IPv4 Address/Mask",
                    "type": "string"
                },
                "ipv6_address": {
                    "description": "Management IPv6 Address/Mask",
                    "type": "string"
                },
                "kind": {
                    "description": "e.g., \"srl\", \"linux\", \"nokia_srlinux\"",
                    "type": "string"
                },
                "labPath": {
                    "description": "Path to the topology file used",
                    "type": "string"
                },
                "lab_name": {
                    "description": "Name of the lab this node belongs to",
                    "type": "string"
                },
                "name": {
                    "description": "Name of the container node",
                    "type": "string"
                },
                "owner": {
                    "description": "OS user from clab inspect output (Used for authorization)",
                    "type": "string"
                },
                "state": {
                    "description": "e.g., \"running\"",
                    "type": "string"
                }
            }
        },
        "models.ClabExecInternalResult": {
            "type": "object",
            "properties": {
                "cmd": {
                    "description": "The command and its arguments as executed",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "return-code": {
                    "description": "Exit code of the command inside the container",
                    "type": "integer"
                },
                "stderr": {
                    "description": "Standard error of the command",
                    "type": "string"
                },
                "stdout": {
                    "description": "Standard output of the command",
                    "type": "string"
                }
            }
        },
        "models.ClabInspectOutput": {
            "type": "object",
            "properties": {
                "containers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.ClabContainerInfo"
                    }
                }
            }
        },
        "models.DeployRequest": {
            "type": "object",
            "properties": {
                "topologyContent": {
                    "description": "Option 1: Direct Topology Content.\nProvide the full containerlab topology YAML as a single string.\nIf this is provided, 'topologySourceUrl' MUST be empty.",
                    "type": "string",
                    "example": "# topology documentation: http://containerlab.dev/lab-examples/single-srl/\nname: srl01\ntopology:\n  kinds:\n    nokia_srlinux:\n      type: ixrd3\n      image: ghcr.io/nokia/srlinux\n\n  nodes:\n    srl1:\n      kind: nokia_srlinux\n    srl2:\n      kind: nokia_srlinux\n\n  links:\n    - endpoints: [\"srl1:e1-1\",\"srl2:e1-1\"]"
                },
                "topologySourceUrl": {
                    "description": "Option 2: Remote Topology Source URL.\nProvide a URL to a Git repository, a specific .clab.yml file in Git (github/gitlab), or a raw HTTP(S) URL.\nIf this is provided, 'topologyContent' MUST be empty.",
                    "type": "string"
                }
            }
        },
        "models.ErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                }
            }
        },
        "models.ExecRequest": {
            "type": "object",
            "required": [
                "command"
            ],
            "properties": {
                "command": {
                    "type": "string",
                    "example": "ip addr show eth1"
                }
            }
        },
        "models.ExecResponse": {
            "type": "object",
            "additionalProperties": {
                "type": "array",
                "items": {
                    "$ref": "#/definitions/models.ClabExecInternalResult"
                }
            }
        },
        "models.GenerateNodeTier": {
            "type": "object",
            "required": [
                "count"
            ],
            "properties": {
                "count": {
                    "description": "Number of nodes in this tier",
                    "type": "integer",
                    "minimum": 1,
                    "example": 4
                },
                "kind": {
                    "description": "Node kind (defaults to 'srl'/'nokia_srlinux' if omitted)",
                    "type": "string",
                    "example": "ceos"
                },
                "type": {
                    "description": "Node type within the kind",
                    "type": "string",
                    "example": "ixrd3"
                }
            }
        },
        "models.GenerateRequest": {
            "type": "object",
            "required": [
                "name",
                "tiers"
            ],
            "properties": {
                "defaultKind": {
                    "description": "Default kind to use if not specified in a tier definition. Defaults to 'srl'.",
                    "type": "string",
                    "example": "ceos"
                },
                "deploy": {
                    "description": "If true, immediately deploy the generated topology using 'clab deploy --reconfigure'.",
                    "type": "boolean"
                },
                "groupPrefix": {
                    "description": "Prefix for node groups (used in graphing). Defaults to \"tier\".",
                    "type": "string",
                    "example": "clos-tier"
                },
                "images": {
                    "description": "Map of kind to container image. Example: { \"srl\": \"ghcr.io/nokia/srlinux:latest\", \"ceos\": \"ceos:4.32.0F\" }",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "ipv4Subnet": {
                    "description": "Management network IPv4 subnet (CIDR). Defaults based on clab default.",
                    "type": "string",
                    "example": "172.20.20.0/24"
                },
                "ipv6Subnet": {
                    "description": "Management network IPv6 subnet (CIDR). Defaults based on clab default.",
                    "type": "string",
                    "example": "2001:172:20:20::/64"
                },
                "licenses": {
                    "description": "Map of kind to license file path (accessible to the clab command). Example: { \"srl\": \"/opt/licenses/srl.lic\" }",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "managementNetwork": {
                    "description": "Name of the management network. Defaults to \"clab\".",
                    "type": "string",
                    "example": "clos-mgmt"
                },
                "maxWorkers": {
                    "description": "Limit concurrent workers during deployment (only applies if Deploy=true). 0 means default.",
                    "type": "integer"
                },
                "name": {
                    "description": "Name for the generated lab topology.",
                    "type": "string",
                    "example": "3-tier-clos"
                },
                "nodePrefix": {
                    "description": "Prefix for node names (e.g., \"node\" -\u003e \"node-1-1\", \"node-2-1\"). Defaults to \"node\".",
                    "type": "string",
                    "example": "clos-node"
                },
                "outputFile": {
                    "description": "Optional: Path where the generated file should be saved *on the server*.\nIf empty and Deploy is false, YAML is returned directly.\nIf empty and Deploy is true, a temporary file is used.\nIf set, the file is saved here. USE WITH CAUTION regarding server paths.",
                    "type": "string"
                },
                "tiers": {
                    "description": "Definition of the CLOS tiers. Order matters (leaf -\u003e spine -\u003e superspine).\nExample: [ { \"count\": 8, \"kind\": \"srl\", \"type\": \"ixrd3\" }, { \"count\": 4, \"kind\": \"ceos\" }, { \"count\": 2 } ]",
                    "type": "array",
                    "minItems": 1,
                    "items": {
                        "$ref": "#/definitions/models.GenerateNodeTier"
                    }
                }
            }
        },
        "models.GenerateResponse": {
            "type": "object",
            "properties": {
                "deployOutput": {
                    "description": "The output from the deploy command (only if Deploy=true). Can be JSON or plain text.\nUse swaggertype:\"object\" to represent json.RawMessage in Swagger.",
                    "type": "object"
                },
                "message": {
                    "description": "Message indicating success or failure.",
                    "type": "string"
                },
                "savedFilePath": {
                    "description": "Path where the file was saved (only if OutputFile was specified or Deploy=true).",
                    "type": "string"
                },
                "topologyYaml": {
                    "description": "The generated topology YAML (only if Deploy=false and OutputFile is empty).",
                    "type": "string"
                }
            }
        },
        "models.GenericSuccessResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                }
            }
        },
        "models.InterfaceInfo": {
            "type": "object",
            "properties": {
                "alias": {
                    "description": "Interface alias (e.g., \"ethernet-1/1\", \"\" if none)",
                    "type": "string"
                },
                "ifindex": {
                    "description": "Interface index",
                    "type": "integer"
                },
                "mac": {
                    "description": "MAC Address",
                    "type": "string"
                },
                "mtu": {
                    "description": "MTU size",
                    "type": "integer"
                },
                "name": {
                    "description": "Interface name (e.g., \"eth0\", \"e1-1\")",
                    "type": "string"
                },
                "state": {
                    "description": "Interface state (e.g., \"up\", \"down\", \"unknown\")",
                    "type": "string"
                },
                "type": {
                    "description": "Interface type (e.g., \"veth\", \"device\", \"dummy\")",
                    "type": "string"
                }
            }
        },
        "models.LoginRequest": {
            "type": "object",
            "required": [
                "password",
                "username"
            ],
            "properties": {
                "password": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "models.LoginResponse": {
            "type": "object",
            "properties": {
                "token": {
                    "type": "string"
                }
            }
        },
        "models.NodeInterfaceInfo": {
            "type": "object",
            "properties": {
                "interfaces": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.InterfaceInfo"
                    }
                },
                "name": {
                    "description": "Name of the container node",
                    "type": "string"
                }
            }
        },
        "models.RedeployRequest": {
            "type": "object",
            "properties": {
                "cleanup": {
                    "description": "Corresponds to --cleanup flag",
                    "type": "boolean"
                },
                "exportTemplate": {
                    "description": "Corresponds to --export-template flag (__full is special)",
                    "type": "string"
                },
                "graceful": {
                    "description": "Corresponds to --graceful flag",
                    "type": "boolean"
                },
                "graph": {
                    "description": "Corresponds to --graph flag",
                    "type": "boolean"
                },
                "ipv4Subnet": {
                    "description": "Corresponds to --ipv4-subnet flag",
                    "type": "string"
                },
                "ipv6Subnet": {
                    "description": "Corresponds to --ipv6-subnet flag",
                    "type": "string"
                },
                "keepMgmtNet": {
                    "description": "Corresponds to --keep-mgmt-net flag",
                    "type": "boolean"
                },
                "maxWorkers": {
                    "description": "Corresponds to --max-workers flag (0 means default)",
                    "type": "integer"
                },
                "network": {
                    "description": "Corresponds to --network flag",
                    "type": "string"
                },
                "skipLabdirAcl": {
                    "description": "Corresponds to --skip-labdir-acl flag",
                    "type": "boolean"
                },
                "skipPostDeploy": {
                    "description": "Corresponds to --skip-post-deploy flag",
                    "type": "boolean"
                }
            }
        }
    },
    "securityDefinitions": {
        "BearerAuth": {
            "description": "Type \"Bearer\" followed by a space and JWT token. Example: \"Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\"",
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}