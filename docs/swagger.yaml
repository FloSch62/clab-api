definitions:
  models.ClabContainerInfo:
    properties:
      container_id:
        description: Docker container ID (short)
        type: string
      group:
        description: Group assigned in topology (Might not always be present)
        type: string
      image:
        description: Container image used
        type: string
      ipv4_address:
        description: Management IPv4 Address/Mask
        type: string
      ipv6_address:
        description: Management IPv6 Address/Mask
        type: string
      kind:
        description: e.g., "srl", "linux", "nokia_srlinux"
        type: string
      lab_name:
        description: Name of the lab this node belongs to
        type: string
      labPath:
        description: Path to the topology file used
        type: string
      name:
        description: Name of the container node
        type: string
      owner:
        description: OS user from clab inspect output (Used for authorization)
        type: string
      state:
        description: e.g., "running"
        type: string
    type: object
  models.ClabInspectOutput:
    properties:
      containers:
        items:
          $ref: '#/definitions/models.ClabContainerInfo'
        type: array
    type: object
  models.DeployRequest:
    properties:
      exportTemplate:
        description: Corresponds to --export-template flag (__full is special)
        example: my_custom_export.tmpl
        type: string
      labNameOverride:
        description: '--- Optional Flags ---'
        example: my-specific-lab-run
        type: string
      maxWorkers:
        description: Corresponds to --max-workers flag (0 means default)
        type: integer
      nodeFilter:
        description: Corresponds to --node-filter flag (comma-separated)
        example: srl1,srl2
        type: string
      reconfigure:
        description: Corresponds to --reconfigure flag
        type: boolean
      skipLabdirAcl:
        description: Corresponds to --skip-labdir-acl flag
        type: boolean
      skipPostDeploy:
        description: Corresponds to --skip-post-deploy flag
        type: boolean
      topologyContent:
        description: 'Option 1: Direct Topology Content (YAML string)'
        example: |-
          name: my-lab
          topology:
            nodes:
              srl1:
                kind: srl
                image: ghcr.io/nokia/srlinux
        type: string
      topologySourceUrl:
        description: |-
          Option 2: Remote Topology Source URL (Git repo, Git file, HTTP(S) URL)
          If provided, TopologyContent is ignored.
        example: https://github.com/hellt/clab-test-repo/blob/main/lab1.clab.yml
        type: string
    type: object
  models.ErrorResponse:
    properties:
      error:
        type: string
    type: object
  models.GenericSuccessResponse:
    properties:
      message:
        type: string
    type: object
  models.InterfaceInfo:
    properties:
      alias:
        description: Interface alias (e.g., "ethernet-1/1", "" if none)
        type: string
      ifindex:
        description: Interface index
        type: integer
      mac:
        description: MAC Address
        type: string
      mtu:
        description: MTU size
        type: integer
      name:
        description: Interface name (e.g., "eth0", "e1-1")
        type: string
      state:
        description: Interface state (e.g., "up", "down", "unknown")
        type: string
      type:
        description: Interface type (e.g., "veth", "device", "dummy")
        type: string
    type: object
  models.LoginRequest:
    properties:
      password:
        type: string
      username:
        type: string
    required:
    - password
    - username
    type: object
  models.LoginResponse:
    properties:
      token:
        type: string
    type: object
  models.NodeInterfaceInfo:
    properties:
      interfaces:
        items:
          $ref: '#/definitions/models.InterfaceInfo'
        type: array
      name:
        description: Name of the container node
        type: string
    type: object
  models.RedeployRequest:
    properties:
      cleanup:
        description: Corresponds to --cleanup flag
        type: boolean
      exportTemplate:
        description: Corresponds to --export-template flag (__full is special)
        type: string
      graceful:
        description: Corresponds to --graceful flag
        type: boolean
      graph:
        description: Corresponds to --graph flag
        type: boolean
      ipv4Subnet:
        description: Corresponds to --ipv4-subnet flag
        type: string
      ipv6Subnet:
        description: Corresponds to --ipv6-subnet flag
        type: string
      keepMgmtNet:
        description: Corresponds to --keep-mgmt-net flag
        type: boolean
      maxWorkers:
        description: Corresponds to --max-workers flag (0 means default)
        type: integer
      network:
        description: Corresponds to --network flag
        type: string
      skipLabdirAcl:
        description: Corresponds to --skip-labdir-acl flag
        type: boolean
      skipPostDeploy:
        description: Corresponds to --skip-post-deploy flag
        type: boolean
    type: object
host: localhost:8080
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: https://swagger.io/support/
  description: This is an API server to interact with Containerlab for authenticated
    Linux users. Runs clab commands as the API server's user. Requires PAM for authentication.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Containerlab API
  version: "1.0"
paths:
  /api/v1/labs:
    get:
      description: Get details about all running labs, filtered by the 'owner' field
        matching the authenticated user (unless user is in SUPERUSER_GROUP).
      produces:
      - application/json
      responses:
        "200":
          description: Filtered JSON output from 'clab inspect --all'
          schema:
            $ref: '#/definitions/models.ClabInspectOutput'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal server error or clab execution failed
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: List All Labs
      tags:
      - Labs
    post:
      consumes:
      - application/json
      description: |-
        Deploys a containerlab topology from either embedded content or a remote URL (Git/HTTP).
        If deploying from content, saves the file to ~/.clab/<labname>/ and sets ownership (requires API server privileges).
        If deploying from URL, containerlab handles fetching; the API does not save the file locally.
      parameters:
      - description: Deployment details (topology content or URL, and options)
        in: body
        name: deploy_request
        required: true
        schema:
          $ref: '#/definitions/models.DeployRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Raw JSON output from 'clab deploy' (or plain text on error)
          schema:
            type: object
        "400":
          description: Invalid input (e.g., missing content/URL, invalid flags, invalid
            name)
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal server error (e.g., file system errors, clab execution
            failed)
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Deploy Lab
      tags:
      - Labs
  /api/v1/labs/{labName}:
    delete:
      description: |-
        Destroys a lab by name, checking ownership via 'owner' field from clab inspect.
        Optionally cleans up the lab directory (~/.clab/<labname>) if 'cleanup=true' is passed and the API deployed it from content.
      parameters:
      - description: Name of the lab to destroy
        in: path
        name: labName
        required: true
        type: string
      - description: 'Remove lab directory (~/.clab/<labname>) after destroy (default:
          false)'
        in: query
        name: cleanup
        type: boolean
      - description: 'Attempt graceful shutdown of containers (default: false)'
        in: query
        name: graceful
        type: boolean
      - description: 'Keep the management network (default: false)'
        in: query
        name: keepMgmtNet
        type: boolean
      - description: Destroy only specific nodes (comma-separated)
        in: query
        name: nodeFilter
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.GenericSuccessResponse'
        "400":
          description: Invalid lab name or node filter
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Lab not found or not owned by user
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal server error or clab execution failed
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Destroy Lab
      tags:
      - Labs
    get:
      description: Get details about a specific running lab, checking ownership via
        'owner' field. Supports '--details'.
      parameters:
      - description: Name of the lab to inspect
        in: path
        name: labName
        required: true
        type: string
      - description: Include full container details (like docker inspect)
        in: query
        name: details
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: Raw JSON output if 'details=true' is used (structure matches
            'docker inspect')" // <--- CHANGE THIS LINE
          schema:
            type: object
        "400":
          description: Invalid lab name
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Lab not found or not owned by user
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal server error or clab execution failed
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Inspect Lab
      tags:
      - Labs
    put:
      consumes:
      - application/json
      description: |-
        Redeploys a lab by name, effectively running destroy and then deploy. Checks ownership.
        Uses the original topology file path found during inspection.
      parameters:
      - description: Name of the lab to redeploy
        in: path
        name: labName
        required: true
        type: string
      - description: Redeployment options
        in: body
        name: redeploy_request
        required: true
        schema:
          $ref: '#/definitions/models.RedeployRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Raw JSON output from 'clab redeploy' (or plain text on error)
          schema:
            type: object
        "400":
          description: Invalid lab name or options
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Lab not found or not owned by user
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal server error or clab execution failed
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Redeploy Lab
      tags:
      - Labs
  /api/v1/labs/{labName}/interfaces:
    get:
      description: Get network interface details for nodes in a specific lab, checking
        ownership.
      parameters:
      - description: Name of the lab
        in: path
        name: labName
        required: true
        type: string
      - description: Filter interfaces for a specific node name
        in: query
        name: node
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: JSON output from 'clab inspect interfaces'
          schema:
            items:
              $ref: '#/definitions/models.NodeInterfaceInfo'
            type: array
        "400":
          description: Invalid lab name or node name
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Lab not found or not owned by user
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal server error or clab execution failed
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: List Lab Interfaces
      tags:
      - Labs
  /login:
    post:
      consumes:
      - application/json
      description: Authenticate user and return JWT token
      parameters:
      - description: User Credentials
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/models.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.LoginResponse'
        "400":
          description: Invalid input
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Invalid credentials
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal server error (PAM config?)
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Login
      tags:
      - Auth
schemes:
- http
- https
securityDefinitions:
  BearerAuth:
    description: 'Type "Bearer" followed by a space and JWT token. Example: "Bearer
      eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."'
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
