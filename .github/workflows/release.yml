name: Build and Release (Debian host container)

on:
  release:
    types: [created]

permissions:
  contents: write            # allow uploading assets

jobs:
  build:
    runs-on: ubuntu-latest    # VM host; job itself runs in container
    container:
      image: debian:bookworm  # every step below runs in this Debian 12 image
      options: --platform linux/amd64

    steps:
      # 1 Get the source
      - uses: actions/checkout@v4

      # 2 Save the tag for later
      - id: tag
        run: echo "TAG=${GITHUB_REF#refs/tags/}" >>"$GITHUB_OUTPUT"

      # 3 Add backports + enable arm64, then install tool‑chains & headers
      - name: Install build dependencies
        run: |
          set -euo pipefail
          echo "deb http://deb.debian.org/debian bookworm-backports main" \
            > /etc/apt/sources.list.d/backports.list          # Go 1.21 :contentReference[oaicite:7]{index=7}
          dpkg --add-architecture arm64                       # multi-arch :contentReference[oaicite:8]{index=8}
          apt-get update -qq
          apt-get install -y --no-install-recommends \
            build-essential \
            gcc-aarch64-linux-gnu \                           # cross compiler :contentReference[oaicite:9]{index=9}
            libpam0g-dev libpam0g-dev:arm64 \                 # pam_appl.h :contentReference[oaicite:10]{index=10}
            -t bookworm-backports golang-1.21-go              # Go 1.21 :contentReference[oaicite:11]{index=11}
          export PATH=$PATH:/usr/lib/go-1.21/bin              # expose go :contentReference[oaicite:12]{index=12}

      # 4 Cache Go modules & build cache (works inside container)
      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            /root/go/pkg/mod
            /root/.cache/go-build
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      # 5 Build linux/amd64 (native inside Debian container)
      - name: Build linux/amd64
        run: |
          mkdir -p dist
          CGO_ENABLED=1 GOOS=linux GOARCH=amd64 \
            go build -ldflags="-s -w" \
            -o dist/clab-api-server-linux-amd64 ./cmd/server

      # 6 Build linux/arm64 (cross‑compile)
      - name: Build linux/arm64
        env:
          CC: aarch64-linux-gnu-gcc
        run: |
          CGO_ENABLED=1 GOOS=linux GOARCH=arm64 \
            go build -ldflags="-s -w" \
            -o dist/clab-api-server-linux-arm64 ./cmd/server
          chmod +x dist/clab-api-server-linux-*

      # 7 Upload to the GitHub Release
      - name: Upload release assets
        uses: softprops/action-gh-release@v1
        with:
          files: |
            dist/clab-api-server-linux-amd64
            dist/clab-api-server-linux-arm64

      # 8  Keep artefacts for seven days
      - uses: actions/upload-artifact@v4
        with:
          name: clab-api-server-${{ steps.tag.outputs.TAG }}
          path: dist/
          retention-days: 7
