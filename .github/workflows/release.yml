name: Build and Release Binary

on:
  release:
    types: [published]

permissions:
  contents: write

jobs:
  build-release:
    name: Build and Upload Release Binaries
    runs-on: ubuntu-latest
    strategy:
      matrix:
        goos: [linux]
        goarch: [amd64, arm64]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24' # Adjust if needed

      # Install dependencies based on the target architecture
      - name: Install build dependencies (amd64)
        if: matrix.goarch == 'amd64'
        run: |
          sudo apt-get update -y
          # Standard build tools and PAM dev libs for native amd64 build
          sudo apt-get install -y build-essential libpam0g-dev

      - name: Install build dependencies (arm64 cross)
        if: matrix.goarch == 'arm64'
        run: |
          sudo apt-get update -y
          # Standard build tools + ARM64 cross-compiler + ARM64 C libs + ARM64 PAM dev libs
          sudo apt-get install -y build-essential gcc-aarch64-linux-gnu libc6-dev-arm64-cross libpam0g-dev-arm64-cross

      # Build the binary, explicitly setting the C compiler for cross-compilation
      - name: Build binary (${{ matrix.goos }}/${{ matrix.goarch }})
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
          CGO_ENABLED: 1
          # Set CC environment variable for CGo to use the correct cross-compiler when targeting arm64
          # For amd64, CC will be empty, letting Go find the default gcc installed by build-essential
          CC: ${{ matrix.goarch == 'arm64' && 'aarch64-linux-gnu-gcc' || '' }}
        run: |
          BINARY_NAME="clab-api-server-${{ github.ref_name }}-${{ matrix.goos }}-${{ matrix.goarch }}"
          echo "Building $BINARY_NAME..."
          # Build the binary
          go build -v -ldflags="-s -w" -o $BINARY_NAME ./cmd/server
          echo "Build complete: $BINARY_NAME"

      # Upload the built binary as a release asset
      - name: Upload Release Asset (${{ matrix.goos }}/${{ matrix.goarch }})
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./clab-api-server-${{ github.ref_name }}-${{ matrix.goos }}-${{ matrix.goarch }}
          asset_name: clab-api-server-${{ github.ref_name }}-${{ matrix.goos }}-${{ matrix.goarch }}
          asset_content_type: application/octet-stream