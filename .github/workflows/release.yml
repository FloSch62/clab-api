name: Build and Release

on:
  release:
    types: [created]

permissions:
  contents: write        # allow uploading assets to the Release page

jobs:
  build:
    runs-on: ubuntu-22.04

    steps:
      # 1 Checkout
      - name: Checkout code
        uses: actions/checkout@v4

      # 2 Extract version tag
      - name: Get release tag
        id: get_tag
        run: echo "TAG=${GITHUB_REF#refs/tags/}" >>"$GITHUB_OUTPUT"

      # 3 Fast Go installer (≈3 s on Ubuntu)
      - name: Setup Go (fast)
        uses: WillAbides/setup-go-faster@v1.14.0
        with:
          go-version: '1.21.x'

      # 4 Enable Arm64 multi‑arch & install build deps
      - name: Install cross‑tool‑chains & PAM headers
        run: |
          sudo dpkg --add-architecture arm64                    # enable multi‑arch :contentReference[oaicite:1]{index=1}
          sudo apt-get update -qq
          sudo apt-get install -y --no-install-recommends \
            build-essential                                     \
            gcc-aarch64-linux-gnu                               \ # cross C compiler :contentReference[oaicite:2]{index=2}
            libpam0g-dev                                        \ # pam_appl.h for amd64 :contentReference[oaicite:3]{index=3}
            libpam0g-dev:arm64                                    # pam_appl.h for arm64 :contentReference[oaicite:4]{index=4}

      # 5 Cache Go modules & build cache
      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/go/pkg/mod
            ~/.cache/go-build
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      # 6 Build linux/amd64 (native)
      - name: Build linux/amd64
        run: |
          mkdir -p dist
          CGO_ENABLED=1 GOOS=linux GOARCH=amd64 \
          go build -ldflags="-s -w" \
              -o dist/clab-api-server-linux-amd64 ./cmd/server

      # 7 Build linux/arm64 (cross‑compile)
      - name: Build linux/arm64
        env:
          CC: aarch64-linux-gnu-gcc                               # tell CGO to use cross compiler :contentReference[oaicite:5]{index=5}
        run: |
          CGO_ENABLED=1 GOOS=linux GOARCH=arm64 \
          go build -ldflags="-s -w" \
              -o dist/clab-api-server-linux-arm64 ./cmd/server

      # 8 Make binaries executable
      - name: Set execute bits
        run: chmod +x dist/clab-api-server-linux-*

      # 9 Upload binaries to the GitHub Release
      - name: Upload Release Assets
        uses: softprops/action-gh-release@v1
        with:
          files: |
            dist/clab-api-server-linux-amd64
            dist/clab-api-server-linux-arm64

      # 10 Save artefacts for CI debugging (optional)
      - name: Upload binaries as artifact
        uses: actions/upload-artifact@v4
        with:
          name: clab-api-server-${{ steps.get_tag.outputs.TAG }}
          path: dist/
          retention-days: 7
